# Boilerplate Setup - Configuration pour nouveaux projets

## Configuration initiale

### D√©pendances requises

#### Composer.json
```json
{
    "require": {
        "php": "^8.2",
        "laravel/framework": "^11.31",
        "laravel/sanctum": "^4.0",
        "league/flysystem-aws-s3-v3": "^3.0"
    },
    "require-dev": {
        "pestphp/pest": "^3.7",
        "pestphp/pest-plugin-laravel": "^3.1",
        "laravel/pint": "^1.13"
    }
}
```

#### Scripts de d√©veloppement
```json
{
    "scripts": {
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ]
    }
}
```

### Configuration de base

#### .env.example
```env
APP_NAME="Mon Application"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost:8000
APP_FRONTEND_URL=http://localhost:3000

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
```

### Structure des dossiers

#### Organisation recommand√©e
```
app/
‚îú‚îÄ‚îÄ Entities/           # Entit√©s du domaine
‚îú‚îÄ‚îÄ Http/
‚îÇ   ‚îú‚îÄ‚îÄ Controllers/    # Contr√¥leurs HTTP
‚îÇ   ‚îú‚îÄ‚îÄ Middleware/     # Middleware personnalis√©
‚îÇ   ‚îî‚îÄ‚îÄ Requests/       # Form Requests
‚îú‚îÄ‚îÄ Models/             # Mod√®les Eloquent
‚îú‚îÄ‚îÄ Repositories/       # Repositories avec interfaces
‚îú‚îÄ‚îÄ Services/           # Services m√©tier
‚îî‚îÄ‚îÄ UseCases/           # Cas d'usage

database/
‚îú‚îÄ‚îÄ factories/          # Factories pour les tests
‚îú‚îÄ‚îÄ migrations/         # Migrations de base de donn√©es
‚îî‚îÄ‚îÄ seeders/           # Seeders de donn√©es

tests/
‚îú‚îÄ‚îÄ Feature/           # Tests d'int√©gration
‚îî‚îÄ‚îÄ Unit/              # Tests unitaires
```

## Scripts d'installation

### Installation automatique
```bash
#!/bin/bash
# install.sh

echo "üöÄ Installation du boilerplate Laravel..."

# Installation des d√©pendances
composer install

# Copie du fichier d'environnement
cp .env.example .env

# G√©n√©ration de la cl√© d'application
php artisan key:generate

# Configuration de la base de donn√©es
echo "üìù Configuration de la base de donn√©es..."
read -p "Nom de la base de donn√©es: " db_name
read -p "Utilisateur de la base de donn√©es: " db_user
read -p "Mot de passe de la base de donn√©es: " db_password

# Mise √† jour du .env
sed -i "s/DB_DATABASE=laravel/DB_DATABASE=$db_name/" .env
sed -i "s/DB_USERNAME=root/DB_USERNAME=$db_user/" .env
sed -i "s/DB_PASSWORD=/DB_PASSWORD=$db_password/" .env

# Ex√©cution des migrations
php artisan migrate

# Installation des d√©pendances frontend
npm install

# Compilation des assets
npm run build

echo "‚úÖ Installation termin√©e !"
echo "üéØ Pour d√©marrer le serveur: php artisan serve"
echo "üéØ Pour le mode d√©veloppement: composer run dev"
```

### Makefile pour les commandes courantes
```makefile
# Makefile

.PHONY: install dev test migrate fresh seed

install:
	composer install
	cp .env.example .env
	php artisan key:generate
	php artisan migrate
	npm install
	npm run build

dev:
	composer run dev

test:
	php artisan test

migrate:
	php artisan migrate

fresh:
	php artisan migrate:fresh

seed:
	php artisan db:seed

setup-test:
	php artisan migrate:fresh --seed --env=testing

lint:
	./vendor/bin/pint

lint-fix:
	./vendor/bin/pint --test
```

## Configuration des outils

### Laravel Pint (Code Style)
```json
{
    "preset": "laravel",
    "rules": {
        "array_syntax": {
            "syntax": "short"
        },
        "ordered_imports": {
            "sort_algorithm": "alpha"
        },
        "no_unused_imports": true,
        "not_operator_with_successor_space": true,
        "trailing_comma_in_multiline": true,
        "phpdoc_scalar": true,
        "unary_operator_spaces": true,
        "binary_operator_spaces": true,
        "blank_line_before_statement": {
            "statements": ["break", "continue", "declare", "return", "throw", "try"]
        },
        "phpdoc_single_line_var_spacing": true,
        "phpdoc_var_without_name": true,
        "method_argument_space": {
            "on_multiline": "ensure_fully_multiline",
            "keep_multiple_spaces_after_comma": true
        },
        "single_trait_insert_per_statement": true
    }
}
```

### PHPUnit Configuration
```xml
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory suffix="Test.php">./tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory suffix="Test.php">./tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory suffix=".php">./app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
```

## Templates de base

### Contr√¥leur de base
```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

abstract class BaseController extends Controller
{
    protected function successResponse($data, int $status = 200): JsonResponse
    {
        return response()->json($data, $status);
    }

    protected function errorResponse(string $message, int $status = 500): JsonResponse
    {
        return response()->json([
            'message' => $message,
            'error' => config('app.debug') ? $message : null
        ], $status);
    }

    protected function validationErrorResponse(array $errors, int $status = 422): JsonResponse
    {
        return response()->json([
            'message' => 'Donn√©es invalides',
            'errors' => $errors
        ], $status);
    }
}
```

### Repository de base
```php
<?php

namespace App\Repositories;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;

abstract class BaseRepository
{
    protected Model $model;

    public function __construct(Model $model)
    {
        $this->model = $model;
    }

    public function findAll(): Collection
    {
        return $this->model->all();
    }

    public function findById(string $id): ?Model
    {
        return $this->model->find($id);
    }

    public function create(array $data): Model
    {
        return $this->model->create($data);
    }

    public function update(string $id, array $data): bool
    {
        return $this->model->where('id', $id)->update($data);
    }

    public function delete(string $id): bool
    {
        return $this->model->where('id', $id)->delete();
    }
}
```

### Service de base
```php
<?php

namespace App\Services;

abstract class BaseService
{
    protected function validateData(array $data, array $rules): array
    {
        $validator = validator($data, $rules);

        if ($validator->fails()) {
            throw new \InvalidArgumentException(
                'Donn√©es invalides: ' . $validator->errors()->first()
            );
        }

        return $validator->validated();
    }

    protected function handleException(\Exception $e): void
    {
        \Log::error('Service error: ' . $e->getMessage(), [
            'exception' => $e,
            'trace' => $e->getTraceAsString()
        ]);

        throw $e;
    }
}
```

## Commandes Artisan personnalis√©es

### Commande de cr√©ation de module
```php
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class MakeModule extends Command
{
    protected $signature = 'make:module {name}';
    protected $description = 'Cr√©er un nouveau module complet';

    public function handle()
    {
        $name = $this->argument('name');
        $namePlural = str_plural($name);

        // Cr√©er l'entit√©
        $this->call('make:entity', ['name' => $name]);

        // Cr√©er le mod√®le
        $this->call('make:model', ['name' => $name . 'Model']);

        // Cr√©er le repository
        $this->call('make:repository', ['name' => $name]);

        // Cr√©er les contr√¥leurs
        $this->call('make:controller', ['name' => $name . '/FindAll' . $namePlural . 'Action']);
        $this->call('make:controller', ['name' => $name . '/Find' . $name . 'ByIdAction']);
        $this->call('make:controller', ['name' => $name . '/Create' . $name . 'Action']);
        $this->call('make:controller', ['name' => $name . '/Update' . $name . 'Action']);
        $this->call('make:controller', ['name' => $name . '/Delete' . $name . 'Action']);

        // Cr√©er les Use Cases
        $this->call('make:usecase', ['name' => $name . '/FindAll' . $namePlural . 'UseCase']);
        $this->call('make:usecase', ['name' => $name . '/Find' . $name . 'ByIdUseCase']);
        $this->call('make:usecase', ['name' => $name . '/Create' . $name . 'UseCase']);
        $this->call('make:usecase', ['name' => $name . '/Update' . $name . 'UseCase']);
        $this->call('make:usecase', ['name' => $name . '/Delete' . $name . 'UseCase']);

        $this->info("Module {$name} cr√©√© avec succ√®s !");
    }
}
```

## Documentation du projet

### README.md template
```markdown
# Nom du Projet

Description courte du projet.

## üöÄ Installation

```bash
# Cloner le projet
git clone [repository-url]

# Installer les d√©pendances
composer install

# Copier le fichier d'environnement
cp .env.example .env

# G√©n√©rer la cl√© d'application
php artisan key:generate

# Configurer la base de donn√©es dans .env

# Ex√©cuter les migrations
php artisan migrate

# Installer les d√©pendances frontend
npm install

# Compiler les assets
npm run build
```

## üõ†Ô∏è D√©veloppement

```bash
# D√©marrer le serveur de d√©veloppement
composer run dev

# Ou s√©par√©ment
php artisan serve
npm run dev
```

## üß™ Tests

```bash
# Ex√©cuter tous les tests
php artisan test

# Ex√©cuter les tests avec couverture
php artisan test --coverage
```

## üìÅ Structure du projet

- `app/Entities/` - Entit√©s du domaine
- `app/Http/Controllers/` - Contr√¥leurs HTTP
- `app/UseCases/` - Cas d'usage
- `app/Repositories/` - Repositories avec interfaces
- `app/Services/` - Services m√©tier
- `app/Models/` - Mod√®les Eloquent

## üîß Configuration

### Variables d'environnement importantes

- `APP_ENV` - Environnement (local, staging, production)
- `DB_*` - Configuration de la base de donn√©es
- `AWS_*` - Configuration AWS S3
- `MAIL_*` - Configuration email

## üìö API Documentation

L'API est document√©e avec Postman. Importez le fichier `api-postman.json` dans Postman.

## ü§ù Contribution

1. Fork le projet
2. Cr√©er une branche feature (`git checkout -b feature/AmazingFeature`)
3. Commit les changements (`git commit -m 'Add some AmazingFeature'`)
4. Push vers la branche (`git push origin feature/AmazingFeature`)
5. Ouvrir une Pull Request

## üìÑ Licence

Ce projet est sous licence MIT. Voir le fichier `LICENSE` pour plus de d√©tails.
```

## Checklist de d√©marrage

### Avant de commencer un nouveau projet
- [ ] Cloner le boilerplate
- [ ] Configurer l'environnement (.env)
- [ ] Installer les d√©pendances (composer install)
- [ ] G√©n√©rer la cl√© d'application
- [ ] Configurer la base de donn√©es
- [ ] Ex√©cuter les migrations
- [ ] Installer les d√©pendances frontend (npm install)
- [ ] Compiler les assets (npm run build)
- [ ] Tester l'installation (php artisan test)
- [ ] Configurer les outils de d√©veloppement (Pint, Pest)
- [ ] Mettre √† jour la documentation (README.md)
- [ ] Configurer le d√©ploiement (si n√©cessaire)
description:
globs:
alwaysApply: true
---
